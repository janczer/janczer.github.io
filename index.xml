<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog =&gt; {content}</title>
    <link>https://janczer.github.io/</link>
    <description>Recent content on Blog =&gt; {content}</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2017 09:01:51 +0200</lastBuildDate>
    
	<atom:link href="https://janczer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Start With Symfony And Docker</title>
      <link>https://janczer.github.io/start-with-symfony-and-docker/</link>
      <pubDate>Wed, 01 Nov 2017 09:01:51 +0200</pubDate>
      
      <guid>https://janczer.github.io/start-with-symfony-and-docker/</guid>
      <description>Docker can help you start with new technology or language without installing all programs on your computer just to try it. You can pull docker images, run it and if you don&amp;rsquo;t like it just remove images.
For examaple for starting learning Symfony and creating your first page there is no need to install nginx/apache, php. You just need to install docker and docker-compose.
Create template for first page in Symfony After you get Symfony installer we can create simple template for our app:</description>
    </item>
    
    <item>
      <title>Working with /dev/input/eventX from Go</title>
      <link>https://janczer.github.io/work-with-dev-input/</link>
      <pubDate>Sat, 09 Sep 2017 12:21:20 +0200</pubDate>
      
      <guid>https://janczer.github.io/work-with-dev-input/</guid>
      <description>Today I would like to show how you can work with stream of bytes from /dev/input/eventX.
First of all I found which files in /dev/input/ bind to my keyboard and mouse. To do it I used command:
$ cat /proc/bus/input/devices  And I have got that my mouse bindind is /dev/input/event10 and my keyboard binding is /dev/input/event3.
... H: Handlers=sysrq kbd event3 leds # keyboard ... ... H: Handlers=mouse1 event10 # mouse .</description>
    </item>
    
    <item>
      <title>Work with git objects from Python</title>
      <link>https://janczer.github.io/work-with-git-objects/</link>
      <pubDate>Mon, 21 Aug 2017 20:02:05 +0200</pubDate>
      
      <guid>https://janczer.github.io/work-with-git-objects/</guid>
      <description>Git store data in files in .git/objects.
Python has a zlib module. We want to read git files data with python:
&amp;gt;&amp;gt;&amp;gt; import zlib &amp;gt;&amp;gt;&amp;gt; f = open(&amp;#39;.git/objects/9d/aeafb9864cf43055ae93beb0afd6c7d144bfa4&amp;#39;, &amp;#39;rb&amp;#39;) &amp;gt;&amp;gt;&amp;gt; data = f.read() &amp;gt;&amp;gt;&amp;gt; print(data) b&amp;#39;x\x01K\xca\xc9OR0e(I-.\xe1\x02\x00\x19\xa6\x03\xbf&amp;#39; &amp;gt;&amp;gt;&amp;gt; zlib.decompress(data) b&amp;#39;blob 5\x00test\n&amp;#39; &amp;gt;&amp;gt;&amp;gt;  This blob means that this is blob-type file (git uses 3 types of file: blob, commit and tree) and 5 is lenght of content test\n:
Also we can check the hash:</description>
    </item>
    
    <item>
      <title>Sort zig-zag filter</title>
      <link>https://janczer.github.io/zig-zag-filter/</link>
      <pubDate>Thu, 13 Jul 2017 18:58:34 +0200</pubDate>
      
      <guid>https://janczer.github.io/zig-zag-filter/</guid>
      <description>Today I implemented some strange filter: Sort zig-zag filter.
This filter works on gray scala images:
I was using these colors: #1c, #38, #54, #70, #8c, #a8, #c4, #e0, #fc.
The filter is creating array of all pixels:
And then it&amp;rsquo;s sorting this array:
On the last step filter is using zig-zag scheme to create image:
That was theory and now we will try it with the real image:
   Original Gray Color           </description>
    </item>
    
    <item>
      <title>Use scala jar</title>
      <link>https://janczer.github.io/use-scala-jar/</link>
      <pubDate>Sat, 08 Jul 2017 17:24:27 +0200</pubDate>
      
      <guid>https://janczer.github.io/use-scala-jar/</guid>
      <description>One week ago I wrote my first program on Scala. It&amp;rsquo;s was an image processing filter.
After this week I implemented seven filters:
 Mirror image Gray filter Sepia filter Inverse filter Split image to RGB channels Color accent filter Histogram  I was writing it like a one scala script per file. But today I changed repository to SBT project. And I learned how compile and how use jar file.</description>
    </item>
    
    <item>
      <title>First Scala</title>
      <link>https://janczer.github.io/first-scala/</link>
      <pubDate>Sat, 01 Jul 2017 20:42:56 +0200</pubDate>
      
      <guid>https://janczer.github.io/first-scala/</guid>
      <description>Today I wrote first program on Scala.
It&amp;rsquo;s very simple filter which makes mirror image horizontally or/and vertically.
for (x &amp;lt;- 0 until w) for (y &amp;lt;- 0 until h) { val wOut = if (ox) w - x - 1 else x val hOut = if (oy) h - y - 1 else y out.setRGB(x, y, img.getRGB(wOut, hOut) &amp;amp; 0xffffff) }  When I wrote with program I use article about image processing in Scala.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://janczer.github.io/about/</link>
      <pubDate>Thu, 20 Apr 2017 21:18:39 +0200</pubDate>
      
      <guid>https://janczer.github.io/about/</guid>
      <description>Hello and welcome to my blog about programing.
Also I have a hobby - pixel art:</description>
    </item>
    
  </channel>
</rss>